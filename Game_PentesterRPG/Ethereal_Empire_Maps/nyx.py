# !!!!!!!!!!!!!!!! DONT DELETE !!!!!!!!!!!!!!! 
# this imports all the skills to uncover the secrets hidden within PentesterRPG
# You can remove time from the entire script if you wish faster answers
# That won't affect the system, it will just disable player experience

import pandas as pd
import glob
import time

# Garantee the player can only use numbers. Security enabled
def nyx(player):
    # Display pet info
    print("\nPet_name: Nyx, the searcher")
    time.sleep(0.5)
    print("\nThis dragon was born for clues.\nCappable of searching artifacts on the current directory.")
    time.sleep(0.5)
    print("He comes limited in skills and hints.")
    time.sleep(0.5)
    print("If dragons are owned by expertises, they can destroy entire kingdoms.")
    time.sleep(0.5)
    print("\nSkill tree:\n\n1. Breat Attack:")
    time.sleep(1)
    print("Breaks an artifact to find the attack sequence.")
    print("\n2. Breat Defense:")
    time.sleep(1)
    print("Breaks an artifact to find the defense sequence.")
    time.sleep(1)

    # Everytime player calls Nyx:
    while True:

        # Generate skill from the input, if valid
        skill = input(player)
        try:

            # The skill number is forced to be a number
            skill_number = int(skill)

            # Only 1 and 2 are allowed.
            if 1 <= skill_number <= 2:

                # Save the player input as a skill
                return skill_number

            # If number is not part of the skill range, print an error message
            else:
                print("Chose 1 or 2.\nNyx has only two skills.")
 
        # If the input is not a number, protect Nyx from hack input 
        except ValueError:
            print("This has an improved nyxmeasure.\nUse only numbers.")
# After player input validation, create chosen skill and run it
skill = nyx("\nNyx: Which skill do you want me to use, master?\n")
player_answer = skill

# Search for hidden artifacts in the current directory
artifacts = glob.glob("*.csv")

# If there are no hidden artifacts, print an error message
if not artifacts:
    print("No artifacts where found in this realm. I am of no use here Master.")

# If there are hidden artifacts, then:    
else:

    # If player answer skill 1 create a decrypted_key list
    if player_answer == 1:
        decrypted_key = []

        # For each encrypted_key found in artifacts:
        for encrypted_key in artifacts:

            # Mostly used as df for dataframe but can be changed
            # df stores what was read from encrypted_key
            df = pd.read_csv(encrypted_key)

            # The key is equal to the string column of the dataframe, named defense non case sensitive.
            key = df[df.columns[df.columns.str.contains('defense', case=False)]]

            # Stores the key in the decrypted key list
            decrypted_key.append(key)
        print("\nRevealing the magic sequence for defense:")

        # Print each key found and stored inside decrypted_key
        for key in decrypted_key:
            print(key)
     
    # Else if player answers skill 2 create another decrypted_key list        
    elif player_answer == 2:
        decrypted_key = []
        
        # For each encrypted_key found in artifacts:
        for encrypted_key in artifacts:
            
            # Mostly used as df for dataframe but can be changed
            # df stores what was read from encrypted_key
            df = pd.read_csv(encrypted_key)
            
            # The key is equal to the string column of the dataframe, named speed less then 30 non case sensitive.
            key = df[df.columns[df.columns.str.contains('speed',case=False) <= 30]]
            
            # Stores the key in the decrypted key list
            decrypted_key.append(key)
        print("\nRevealing the magic sequence for attack:")
        
        # Print each key found and stored inside decrypted_key
        for key in decrypted_key:
            print(key)
