import os

# Allows player to open bag instead of code --goto bag.md
# If there is no bag, it displays a hint
def open_bag():
    ## if file bag.md exist in whole workspace bring it to current directory
    if os.path.isfile("bag.md"):
        os.system("code --goto bag.md")
        print("Bag opened.")
    else:
        print("You have destroyed the bag. Create a new one by typing: create_bag")
        
# Allows the player to use decrypt instead of ccpryt -d
def decrypt_the():
    #if user types decrypt_the, it will do crcrypt -d
    os.system("ccrypt -d") 
    print("Type the file you want to decrypt")
    
    

# Allows player to create bag instead of code echo "text information" > bag.md && bag.md
# If bag already exists, it displays a hint
def create_bag():
    if not os.path.isfile("bag.md"):
        with open("bag.md", "w") as file:
            file.write("Here you can save what you need for your travel")
        os.system("code bag.md")
        print("New bag created")
    else:
        print("You already have a bag. There is no use creating another")



# Beta tests:
# Beta testing will allow users to interact with the npc.
# Will be applied a different model to every npc.
# def interact_with():
#     key = input("Enter the key: ")
#     if key == "correct_key":
#         print("Access granted. Welcome!")
#     else:
#         print("Incorrect key. You should explore.")

# Beta tests:
# Beta testing will allow users to communicate with encrypted_portal
# Will be applied a different model to every portal.
# def unlock_portal():
#     if os.path.isfile(f"{INVENTORY_DIR}/magic_key.txt"):
#         print("Unlocking portal with the magic key...")
#         unlock_door()
#         move_forward()
#     else:
#         interact_with()
#
#def go_backwards():
#    os.chdir('..')
#
#def save_key(key):
#    with open('decryptor_device.md', 'w') as f:
#        f.write(f"Key is {key}")
#
# Test the functions
#go_backwards()
#save_key("xxxxx")
