# Please install all patches before
# playing PentesterRPG:
# source install_pentester_patch.zsh
# If you understand programming language 
# you can remove permissions and
# edit all functions you want, to
# fulfill your needs.

# Allows player to open bag instead of 
# code --goto bag.md
# If there is no bag, it displays a hint
open_bag() {
  if [[ -f "bag.md" ]]; then 
    code cd bag.md 
    code echo "Bag opened."
  else 
    echo "You have destroyed the bag. Create a new one by typing : create_bag"
  fi
}

# Allows player to create bag instead of 
# code echo "text information" > bag.md && bag.md
# If bag already exists, it displays a hit  
create_bag() {
  if ! [[ -f "bag.md" ]]; then 
    echo "Here you can save what you need for your travel" > bag.md
    code bag.md 
    echo "new bag created"
  else 
    echo "You already have a bag. There is no use creating another"
  fi
}

# Beta tests:  
# Beta testing will allow users to interact with the npc.
# Will be applied a different model to every npc. 
#interact_with() { 
#  read -p "Enter the key: " key
#  if [ "$key" = "correct_key"]; then
#    echo "Acess granted. Welcome!" 
#  else 
#    echo "Incorrect key. You should explore."
#  fi
#}  

# Beta tests:
# Beta testing will allow users to communicate with encrypted_portal
# Will be applied a different model to every portal.
#unlock_portal() {
#  if [ -f "$INVENTORY_DIR/magic_key.txt"]; then
#    echo "unlocking portal with the magic key..."
#    unlock_door
#    move_forward
#  else 
#    interact_with
#  fi
#}

#!/bin/bash

# Define the maximum number of keys the decryptor can hold
#max_keys=2

# Define a function to remove a deposited key
#remove_key() {
#    if [ ${#keys[@]} -gt 0 ]; then
#        key="${keys[0]}"
#        keys=("${keys[@]:1}")
#        echo "Key removed successfully"
#    else
#        echo "Decryptor is empty. Cannot remove a key"
#    fi
#}

# Define a function to check if a key is already deposited
#is_key_deposited() {
#    local key
#    for key in "${keys[@]}"; do
#        if [ "$key" = "$1" ]; then
#            return 0
#        fi
#    done
#    return 1
#}

# Define a function to clear all deposited keys
#clear_keys() {
#    keys=()
#    echo "All keys cleared"
#}

# Define a function to generate random keys
#generate_random_key() {
#    echo "$(echo "$(cat /dev/urandom | tr -cd 48)"; date +%s%N)"
#}

# Function to deposit a key
#deposit_key() {
#    if [ ${#keys[@]} -lt $max_keys ]; then
#        local key
#        key="$1"
#        if ! is_key_deposited "$key"; then
#            keys+=("$key"
#            echo "Key deposited successfully"
#        else
#            echo "Key is already deposited"
#        fi
#    else
#        echo "Decryptor is full. Cannot deposit more keys"
#    fi
#}

# Function to display deposited keys
#display_keys() {
#    echo "Deposited keys:"
#    for key in "${keys[@]}"; do
#        echo "$key"
#    done
#}

# Main script
#echo "Welcome to the orb_of_decryption"
#echo "Type 'deposit <key>' to deposit a key"
#echo "Type 'remove <key>' to remove a key"
#echo "Type 'clear' to clear all keys"
#echo "Type 'display' to display deposited keys"
#echo "Type 'generate' to generate a random key"
#echo "Type 'exit' to exit"

#while true; do
#    read -p "> " input

#    IFS=' ' read -r -a args <<< "$input"
#    command="${args[0]}"
#    case $command in
#        deposit)
#            key="${args[1]}"
#            deposit_key "$key"
#            ;;
#        remove)
#            key="${args[1]}"
#            remove_key
#            ;;
#        clear)
#            clear_keys
#            ;;
#        display)
#            display_keys
#            ;;
#        generate)
#            echo "Generated key: $(generate_random_key)"
#            ;;
#        exit)
#            echo "Goodbye"
#            exit 0
#            ;;
#        *)
#            echo "Invalid command"
#            ;;
#    esac
#done

# Future updates:

# unlock_door
# move_forward
# interact_with


